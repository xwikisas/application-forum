<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="ForumCode.JavascriptExtension" locale="">
  <web>ForumCode</web>
  <name>JavascriptExtension</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>ForumCode.JavascriptExtension</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>f1022d53-0ca4-4fcd-bf4e-0a2787f26aec</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>var XWiki = (function (XWiki) {
// Start XWiki augmentation.
var viewers = XWiki.viewers = XWiki.viewers || {};
/**
 * Javascript enhancements for the comments viewer.
 */
viewers.xcommentSelector = '.comment';
viewers.Comments = Class.create({
  xcommentSelector : viewers.xcommentSelector,
  /** Constructor. Adds all the JS improvements of the Comments area. */
  initialize: function(convContainer) {
    if (!convContainer || typeof(convContainer) == 'undefined') {
      // if we don't have a container, do nothing, this is to prevent the default behaviour of the comments enhancer
      return false;
    }
    this.conversation = convContainer;
    var conversationId = this.conversation.readAttribute('id');
    if (conversationId) {
      this.xcommentSelector = '#' + conversationId + ' ' + this.xcommentSelector;
    }
    this.startup();
    this.addConversationHandlers();
    this.generatorTemplate = 'conversations.vm';
    // We wait for a notification for the AJAX loading of the Comments metadata tab.
    this.addTabLoadListener();
  },
  /** Enhance the Comments UI with JS behaviors. */
  startup : function() {
    if (this.conversation.down('.AddComment')) {
      this.form = this.conversation.down('.AddComment').up('form');
    } else {
      this.form = undefined;
    }
    this.loadIDs();
    this.addDeleteListener();
    this.addReplyListener();
    this.addPermalinkListener();
    this.addSubmitListener(this.form);
    this.addCancelListener();
    this.addEditListener();
    this.addPreview(this.form);
  },
  addConversationHandlers : function() {
    this.addConversationDeleteListener();
    this.addConversationEditListener();
    // this.addConversationHideListener();
    this.addConversationLikeListener();
    this.addConversationPermalinkListener();
  },
  /**
   * Parse the IDs of the comments to obtain the xobject number.
   */
  loadIDs : function() {
    $$(this.xcommentSelector).each(function(item) {
      var elementId = item.id;
      item._x_number = elementId.substring(elementId.lastIndexOf('_') + 1) - 0;
    });
  },
  /**
   * Ajax comment deletion.
   * For all delete buttons, listen to "click", and make ajax request to remove the comment. Remove the corresponding
   * HTML element on succes (replace it with a small notification message). Display error message (alert) on failure.
   */
  addDeleteListener : function() {
    $$(this.xcommentSelector).each(function(item) {
      // Prototype bug in Opera: $$(".comment a.delete") returns only the first result.
      // Quick fix until Prototype 1.6.1 is integrated.
      item = item.down('a.delete');
      if (!item) {
        return;
      }
      item.observe('click', function(event) {
        item.blur();
        event.stop();
        if (item.disabled) {
          // Do nothing if the button was already clicked and it's waiting for a response from the server.
          return;
        } else {
          new XWiki.widgets.ConfirmedAjaxRequest(
            /* Ajax request URL */
            item.readAttribute('href') + (Prototype.Browser.Opera ? '' : '&amp;ajax=1&amp;outputSyntax=plain'),
            /* Ajax request parameters */
            {
              onCreate : function() {
                // Disable the button, to avoid a cascade of clicks from impatient users
                item.disabled = true;
              },
              onSuccess : function() {
                // Remove the corresponding HTML element from the UI and update the comment count
                var comment = item.up(this.xcommentSelector);
                // If the form is inside this comment's reply thread, move it back to the bottom.
                if (this.form &amp;&amp; this.form.descendantOf(comment.next('.commentreplies'))) {
                  this.resetForm();
                }
                // Replace the comment with a "deleted comment" placeholder
                comment.replace(this.createNotification("$services.localization.render('core.viewers.comments.commentDeleted')", 'success'));
                this.updateCount();
              }.bind(this),
              onComplete : function() {
                // In the end: re-enable the button
                item.disabled = false;
              }
            },
            /* Interaction parameters */
            {
              confirmationText: "$services.localization.render('core.viewers.comments.delete.confirm')",
              progressMessageText : "$services.localization.render('core.viewers.comments.delete.inProgress')",
              successMessageText : "$services.localization.render('core.viewers.comments.delete.done')",
              failureMessageText : "$services.localization.render('core.viewers.comments.delete.failed')"
            }
          );
        }
      }.bindAsEventListener(this));
    }.bind(this));
  },
  /**
   * Ajax comment editing.
   * For all edit buttons, listen to "click", and make ajax request to retrieve the form and save the comment.
   */
  addEditListener : function() {
    $$(this.xcommentSelector).each(function(item) {
      // Prototype bug in Opera: $$(".comment a.delete") returns only the first result.
      // Quick fix until Prototype 1.6.1 is integrated.
      item = item.down('a.edit');
      if (!item) {
        return;
      }
      item.observe('click', function(event) {
        item.blur();
        event.stop();
        if (item.disabled) {
          // Do nothing if the button was already clicked and it's waiting for a response from the server.
          return;
        } else if (item._x_editForm){
          // If the form was already fetched, but hidden after cancel, just show it again
          // without making a new request
          var comment = item.up(this.xcommentSelector);
          comment.hide();
          item._x_editForm.show();
        } else {
          new Ajax.Request(
            /* Ajax request URL */
            item.readAttribute('href'),
            /* Ajax request parameters */
            {
              onCreate : function() {
                // Disable the button, to avoid a cascade of clicks from impatient users
                item.disabled = true;
                item._x_notification = new XWiki.widgets.Notification("$services.localization.render('core.viewers.comments.editForm.fetch.inProgress')", 'inprogress');
              },
              onSuccess : function(response) {
                try {
                  // Hide other comment editing forms (allow only one comment to be edited at a time)
                  if (this.editing) {
                    this.cancelEdit(false, this.editing);
                  }
                  // Replace the comment text with a form for editing it
                  var comment = item.up(this.xcommentSelector);
                  comment.insert({after: response.responseText});
                  item._x_editForm = comment.next();
                  this.addSubmitListener(item._x_editForm);
                  this.addPreview(item._x_editForm);
                  item._x_editForm.down('a.cancel').observe('click', this.cancelEdit.bindAsEventListener(this, item));
                  comment.hide();
                  // Currently editing: this comment
                  this.editing = item;
                } catch (e) {
                  console.log('Failed to activate editing: ' + e);
                }
                item._x_notification.hide();
              }.bind(this),
              onFailure : function (response) {
                var failureReason = response.statusText;
                if (response.statusText == '' /* No response */ || response.status == 12031 /* In IE */) {
                  failureReason = 'Server not responding';
                }
                item._x_notification.replace(new XWiki.widgets.Notification("$services.localization.render('core.viewers.comments.editForm.fetch.failed')" + failureReason, 'error'));
              }.bind(this),
              on0 : function (response) {
                response.request.options.onFailure(response);
              },
              onComplete : function() {
                // In the end: re-enable the button
                item.disabled = false;
              }
            }
          );
        }
      }.bindAsEventListener(this));
    }.bind(this));
  },
  /**
   * Cancel edit
   */
  cancelEdit : function (event, editActivator) {
    if (event) {
      event.stop();
    }
    var comment = editActivator.up(this.xcommentSelector);
    editActivator._x_editForm.hide();
    comment.show();
    this.cancelPreview(editActivator._x_editForm);
    this.editing = false;
    editActivator._x_editForm = undefined;
  },
  /**
   * Inline reply: Move the form under the replied comment and update the hidden "replyto" field.
   */
  addReplyListener : function() {
    if (this.form) {
      $$(this.xcommentSelector).each(function(item) {
        // Prototype bug in Opera: $$(".comment a.commentreply") returns only the first result.
        // Quick fix until Prototype 1.6.1 is integrated.
        item = item.down('a.commentreply');
        if (!item) {
          return;
        }
        item.observe('click', function(event) {
          item.blur();
          event.stop();
          // If the form was already displayed as a reply, re-enable the Reply button for the old location
          if (this.form.up('.commentreplies')) {
            this.form.up('.commentreplies').previous(this.xcommentSelector).down('a.commentreply').show();
          }

          // Insert the form on top of that comment's discussion
          item.up(this.xcommentSelector).next('.commentthread').insert({'top' : this.form});

          // Set the replyto field to the replied comment's number
          this.form['XWiki.XWikiComments_replyto'].value = item.up(this.xcommentSelector)._x_number;
          // Clear the contents and focus the textarea
          this.form['XWiki.XWikiComments_comment'].value = '';
          // this.form["XWiki.XWikiComments_comment"].focus();
          // Hide the reply button
          item.hide();
        }.bindAsEventListener(this));
      }.bind(this));
    } else {
      // If, for some reason, the form is missing, hide the reply functionality from the user
      $$(this.xcommentSelector + ' a.commentreply').each(function(item) {
        item.hide();
      });
    }
  },
  /**
   * Permalink: Display a modal popup providing the permalink.
   */
  addPermalinkListener : function() {
    $$(this.xcommentSelector + ' a.permalink').each(function(item) {
      item.observe('click', function(event) {
        item.blur();
        event.stop();
        showPermalinkBox(item);
      });
    });
  },
  /**
   * When pressing Submit, check that the comment is not empty. Submit the form with ajax and update the whole comments
   * zone on success.
   *
   * We customize this function only to handle the redirect for the comment edit form, which is wrongly being overwritten with a URL to the current document
   */
  addSubmitListener : function(form) {
    if (form) {
      // Add listener for submit
      form.down("input[type='submit']").observe('click', function(event) {
        event.stop();
        if (form.down('textarea').value != '') {
          var formData = new Hash(form.serialize(true));
          // only overwrite the xredirect if it's not already set. In any case, add comment and add reply don't use this redirect, they use the xpage and vm under
          if(!formData.get('xredirect')) {
            formData.set('xredirect', window.docgeturl + '?xpage=xpart&amp;vm=' + this.generatorTemplate);
          }
          // Allows CommentAddAction to parse a template which will return a message telling if the captcha was wrong.
          formData.set('xpage', 'xpart');
          formData.set('vm', this.generatorTemplate);
          // Strip whatever query string is supplied by the form so it doesn't override the formData.
          var url = form.action.replace(/\?.*/, '');
          formData.unset('action_cancel');
          // Create a notification message to display to the user when the submit is being sent
          form._x_notification = new XWiki.widgets.Notification("$services.localization.render('core.viewers.comments.add.inProgress')", 'inprogress');
          form.disable();
          this.restartNeeded = false;
          new Ajax.Request(url, {
            method : 'post',
            evalJS : false,
            parameters : formData,
            onSuccess : function () {
              this.restartNeeded = true;
              this.editing = false;
              form._x_notification.replace(new XWiki.widgets.Notification("$services.localization.render('core.viewers.comments.add.done')", 'done'));
            }.bind(this),
            onFailure : function (response) {
              var failureReason = response.statusText;
              if (response.statusText == '' /* No response */ || response.status == 12031 /* In IE */) {
                failureReason = 'Server not responding';
              }
              form._x_notification.replace(new XWiki.widgets.Notification("$services.localization.render('core.viewers.comments.add.failed')" + failureReason, 'error'));
            }.bind(this),
            on0 : function (response) {
              response.request.options.onFailure(response);
            },
            onComplete : function (response) {
              if (this.restartNeeded) {
                // force reload
                location.reload();
                /*
                this.conversation.innerHTML = response.responseText;
                document.fire('xwiki:docextra:loaded', {
                  'id' : 'Comments',
                  'element' : this.conversation
                });
                this.updateCount()
                */
              } else {
                form.enable();
              } 
            }.bind(this)
          });
        }
      }.bindAsEventListener(this));
    }
  },
  addCancelListener : function() {
    if (this.form) {
      // I have no idea what this initial location is used for, but we leave it here and correct it to use .commentscontent instead of #_comments
      this.initialLocation = new Element('span', {className : 'hidden'});
      this.conversation.down('.answer').insert(this.initialLocation);
      // If the form is inside a thread, as a reply form, move it back to the bottom.
      var that = this;
      this.form.down('a.cancel').observe('click', this.resetForm.bindAsEventListener(this));
    }
  },
   /**
   * Add a preview button that generates the rendered comment,
   */
  addPreview : function(form) {
    if (!form || !XWiki.hasEdit) {
      return;
    }
    var previewURL = "$xwiki.getURL('__space__.__page__', 'preview')".replace('__space__', encodeURIComponent($$('meta[name=space]')[0].content)).replace('__page__', encodeURIComponent($$('meta[name=page]')[0].content));
    form.commentElt = form.down('textarea');
    var buttons = form.down('input[type=submit]').up('div');
    form.previewButton = new Element('span', {'class' : 'buttonwrapper'}).update(new Element('input', {'type' : 'button', 'class' : 'button', 'value' : "$services.localization.render('core.viewers.comments.preview.button.preview')"}));
    form.previewButton._x_modePreview = false;
    form.previewContent = new Element('div', {'class' : 'answer commentPreview'});
    form.commentElt.insert({'before' : form.previewContent});
    form.previewContent.hide();
    buttons.insert({'top' : form.previewButton});
    form.previewButton.observe('click', function() {
      if (!form.previewButton._x_modePreview &amp;&amp; !form.previewButton.disabled) {
        form.previewButton.disabled = true;
        var notification = new XWiki.widgets.Notification("$services.localization.render('core.viewers.comments.preview.inProgress')", 'inprogress');
        new Ajax.Request(previewURL, {
          method : 'post',
          parameters : {'xpage' : 'plain', 'sheet' : '', 'content' : form.commentElt.value},
          onSuccess : function (response) {
            this.doPreview(response.responseText, form);
            notification.hide();
          }.bind(this),
          /* If the content is empty or does not generate anything, we have the "This template does not exist" response,
             with a 400 status code. */
          on400 : function(response) {
            this.doPreview('&amp;nbsp;', form);
            notification.hide();
          }.bind(this),
          onFailure : function (response) {
            var failureReason = response.statusText;
            if (response.statusText == '' /* No response */ || response.status == 12031 /* In IE */) {
              failureReason = 'Server not responding';
            }
            notification.replace(new XWiki.widgets.Notification("$services.localization.render('core.viewers.comments.preview.failed')" + failureReason, 'error'));
          },
          on0 : function (response) {
            response.request.options.onFailure(response);
          },
          onComplete : function (response) {
            form.previewButton.disabled = false;
          }.bind(this)
        });
      } else {
        this.cancelPreview(form);
      }
    }.bindAsEventListener(this));
  },
  /**
   * Display the comment preview instead of the comment textarea.
   * 
   * @param content the rendered comment, as HTML text
   * @param form the form for which the preview is done
   */
  doPreview : function(content, form) {
    form.previewButton._x_modePreview = true;
    form.previewContent.update(content);
    form.previewContent.show();
    form.commentElt.hide();
    form.previewButton.down('input').value = "$services.localization.render('core.viewers.comments.preview.button.back')";
  },
  /**
   * Display the comment textarea instead of the comment preview.
   *
   * @param form the form for which the preview is canceled
   */
  cancelPreview : function(form) {
    if (form.previewButton != undefined) {
      form.previewButton._x_modePreview = false;
      form.previewContent.hide();
      form.previewContent.update('');
      form.commentElt.show();
      form.previewButton.down('input').value = "$services.localization.render('core.viewers.comments.preview.button.preview')";
    }
  },
  resetForm : function (event) {
    if (event) {
      event.stop();
    }
    if (this.form.up('.commentreplies')) {
      // Show the comment's reply button
      this.form.up(".commentreplies").previous(this.xcommentSelector).down('a.commentreply').show();

      // Put the form back to its initial location and clear the contents
      this.initialLocation.insert({after: this.form});
    }
    this.form['XWiki.XWikiComments_replyto'].value = '';
    this.form['XWiki.XWikiComments_comment'].value = '';
    this.cancelPreview(this.form);
  },
  /**
   * Customized to take into account the new display of the conversation count.
   */
  updateCount : function() {
    var cmtCounterObj =  this.conversation.down('[objtype=nbComments]'); 
    if (cmtCounterObj) {
    // Update number of current conversation comments
      this.conversation.down('[objtype=nbComments]').update($$('#' + this.conversation.id + '[objtype=comment]').size());
    }
    // Update total number of answers
  $$('.topic-answers').get(0).update($$('[objtype=answer]').size());
  // Update global number of topic comments, actually it's number of comments + number of anwers answers
  $$('.topic-comments').get(0).update($$('[objtype=comment]', '[objtype=answer]').size())
  },
  /**
   * Registers a listener that watches for the insertion of the Comments tab and triggers the enhancements.
   * After that, the listener removes itself, since it is no longer needed.
   * We overwrite this in order to listen to only the reload of this conversation, not to all conversations.
   */
  addTabLoadListener : function(event) {
    var listener = function(event) {
      if (event.memo.id == 'Comments' &amp;&amp; event.memo.element == this.conversation) {
        this.startup();
      }
    }.bindAsEventListener(this);
    document.observe('xwiki:docextra:loaded', listener);
  },
  /**
   * Just a simple message box that is displayed at various events: comment deleted, sending comment...
   */
  createNotification : function(message, typeMsg) {
    if (typeMsg == 'success'){
      var classCSS = 'box successmessage';
    } else if(typeMsg == 'warning') {
      var classCSS = 'box warningmessage';
    }
    var msg = new Element('div', {'class' : classCSS });
    msg.update(message);
    return msg.outerHTML;
  },

  /**
   * Ajax conversation deletion.
   */
  addConversationDeleteListener : function() {
    var conversationDelete = this.conversation.down('.answer-moderation a.delete');
    if (!conversationDelete) {
      return;
    }
    conversationDelete.observe('click', function(event) {
      var commentsCount = $$(this.xcommentSelector).size();
      conversationDelete.blur();
      event.stop();
      if (conversationDelete.disabled) {
        // Do nothing if the button was already clicked and it's waiting for a response from the server.
        return;
      } else {
        new XWiki.widgets.ConfirmedAjaxRequest(
          /* Ajax request URL */
          conversationDelete.readAttribute('href') + (Prototype.Browser.Opera ? '' : '&amp;ajax=1&amp;outputSyntax=plain'),
          /* Ajax request parameters */
          {
            onCreate : function() {
              // Disable the button, to avoid a cascade of clicks from impatient users
              conversationDelete.disabled = true;
            },
            onSuccess : function(data) {
              // Remove the corresponding HTML element from the UI
              var conversation = conversationDelete.up('.answer');
              // Replace the comment with a "deleted conversation" placeholder
              var mailsentMsg = '';
              if(data.responseJSON.mailsent == '0'){
                mailsentMsg = this.createNotification("$services.localization.render('conversations.deleteanswer.error.nomailsent')", 'warning');
              }
              conversation.replace(this.createNotification("$services.localization.render('conversation.delete.success')", 'success') + mailsentMsg);
             this.updateCount();
            }.bind(this),
            onComplete : function() {
              // In the end: re-enable the button
              conversationDelete.disabled = false;
            }
          },
          /* Interaction parameters */
          {
            confirmationText: commentsCount &gt; 0 ? "$escapetool.javascript($services.localization.render('conversation.delete.confirm.withReplies', ['__number__']))".replace('__number__', commentsCount) : "$escapetool.javascript($services.localization.render('conversation.delete.confirm'))",
            progressMessageText : "$services.localization.render('conversation.delete.inProgress')",
            successMessageText : "$services.localization.render('conversation.delete.done')",
            failureMessageText : "$services.localization.render('conversation.delete.failed')"
          }
        );
      }
    }.bindAsEventListener(this));
  },
  addConversationEditListener : function() {
    var conversationEdit = this.conversation.down('.answer-moderation a.edit');
    if (!conversationEdit) {
      return;
    }
    conversationEdit.observe('click', function(event) {
      // for now we use non javascript editing for this one
      return;
  
      event.stop();
      // check if a form exists already and if it has something in it
      var existingForm = this.conversation.down('.conversation-editformcontainer form');
      if (existingForm &amp;&amp; existingForm.getElements().size() &gt; 0) {
        return;
      }
      var conversationEditFormContainer = new Element('div', {'class' : 'loading conversation-editformcontainer'});
      var conversationInfo = this.conversation.down('.conversation-info');
      conversationInfo.insert({after : conversationEditFormContainer});
      var url = event.findElement().readAttribute('href');
      // make up a save URL from the edit URL
      var saveUrl = url.replace('\/edit\/', '/save/');
      var editForm = new Element('form', {'method' : 'post', 'action' : saveUrl})
      conversationEditFormContainer.insert(editForm);
      // create the buttons for the future form, but don't insert them just yet
      var saveButton = new Element('input', {'type' : 'submit', 'value' : "$escapetool.javascript($services.localization.render('save'))", 'class' : 'button-orange'});
      var cancelButton = new Element('a', {'href' : window.location.href, 'class' : 'button-grey'}).insert("$services.localization.render('cancel')");
      cancelButton.observe('click', function(event) {
        var conversationFormContainer = event.findElement('.conversation-editformcontainer');
        if (conversationFormContainer) {
          event.stop();
          conversationFormContainer.remove();
        }
      });
      var buttonsContainer = new Element('div', {'class' : 'buttonwrapper'}).insert(saveButton).insert(' ').insert(cancelButton);
      new Ajax.Request(url, {
        method : 'get',
        parameters : {'xpage' : 'plain'},
        onSuccess : function (response) {
          // put the form data in the form
          editForm.insert(response.responseText);
          // put the redirect in the form and wait for the prey...
          editForm.insert(new Element('input', {'type' : 'hidden', 'name' : 'xredirect', 'value' : window.location.href}));
          editForm.insert(buttonsContainer);
        }.bind(this),
        onFailure : function (response) {
          var failureReason = response.statusText;
          if (response.statusText == '' /* No response */ || response.status == 12031 /* In IE */) {
            failureReason = 'Server not responding';
          }
          editForm._x_notification = new XWiki.widgets.Notification("$services.localization.render('conversation.edit.failed')" + failureReason, 'error');
          conversationEditFormContainer.remove();
        }.bind(this),
        on0 : function (response) {
          response.request.options.onFailure(response);
        },
        onComplete : function (response) {
          conversationEditFormContainer.removeClassName('loading');
        }.bind(this)
      });
    }.bindAsEventListener(this));
  },
  toggleConversationContent : function() {
    var commentsContent = this.conversation.down('.answer');
    if (commentsContent) {
      commentsContent.toggleClassName('hidden');
    }
    var conversationTitle = this.conversation.down('.conversation-titlebar');
    if (conversationTitle) {
      conversationTitle.toggleClassName('conversation-showhandler');
    }
  },
  /**
    * Hide the conversation if it's not focused and add a handler to toggle it.
    *
    */
  addConversationHideListener : function() {
    var isVisible = false;
    // we cannot use .xwikicomment:target here since we're not sure it;s already loaded (e.g. on chrome) so we read the anchor manually
    var anchor = window.location.hash;
    if (anchor &amp;&amp; anchor != '' &amp;&amp; (this.conversation.down(anchor) || this.conversation.match(anchor))) {
      isVisible = true;
    }
    // force display:
    isVisible = true;
    var conversationTitle = this.conversation.down('.conversation-titlebar');
    if (conversationTitle) {
      if (!isVisible) {
        this.toggleConversationContent();
      }
      // add the listener
      conversationTitle.observe('click', function(event){
        this.toggleConversationContent();
      }.bindAsEventListener(this));
      // and a class name
      conversationTitle.addClassName('conversation-togglehandler');
    }
  },
  addConversationLikeListener : function() {
    var conversationLike = this.conversation.down('.conversation-like');
    // if there is no clickable button, return, don't do anything
    if (!conversationLike) {
      return;
    }
    // if we have an active like button, add a listener to it
    conversationLike.observe('click', function(event) {
      conversationLikeHandler(event);
    }.bindAsEventListener(this));
  },
  addConversationPermalinkListener : function() {
    var conversationPermalink = this.conversation.down('.conversation-permalink a');
    if (!conversationPermalink) {
      return;
    }
    conversationPermalink.observe('click', function(event) {
      conversationPermalink.blur();
      event.stop();
      showPermalinkBox(conversationPermalink);
    });
  }
});
function conversationLikeHandler(event) {
  console.log('In click');

  event.stop();
  var topicLikeBlock = event.findElement('.conversation-like');
  if (topicLikeBlock.votingInProgress) {
    // there is already a voting in progress, don't start again
    return;
  }
  // find the conversation document name to vote for
  var topicDocRef;
  if (topicLikeBlock) {
    var topicNameInput = topicLikeBlock.down('input[name=documenttolike]');
    if (topicNameInput) {
      topicDocRef = topicNameInput.value;
    }
  }
  if (!topicDocRef || typeof(topicDocRef) == 'undefined') {
    // we don't have the name of the document to like, return
    return;
  }

  console.log('Liking ' + topicDocRef);
  var likeUrl = "$escapetool.javascript($xwiki.getURL('ForumCode.Ratings', 'get'))";
  topicLikeBlock.votingInProgress = false;

  new Ajax.Request(likeUrl, {
    method : 'post',
    parameters : {'outputSyntax' : 'plain', 'docRef' : topicDocRef, 'vote' : '1'},
    onCreate : function () {
      topicLikeBlock.votingInProgress = true;
      topicLikeBlock._x_notification = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('conversation.like.loading'))", 'inprogress');
    }.bind(this),
    onSuccess : function (response) {
      topicLikeBlock._x_notification.replace(new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('conversation.like.done'))", 'done'));
      // get the conversation score which is the child of the like block
      var scoreDisplayer = topicLikeBlock.down('.conversation-score');
      if (scoreDisplayer) {
        scoreDisplayer.update(response.responseJSON.totalvotes);
        var scoreTitle = scoreDisplayer.title;
        var matches = scoreTitle.match(/\d+/g);
        scoreDisplayer.title = scoreTitle.replace(matches[0], response.responseJSON.totalvotes)
      }
      // and now remove this listener from the like button, since the current user shouldn't be able to vote again ...
      topicLikeBlock.stopObserving('click');
      // ... and put inactive class to change the style
      topicLikeBlock.removeClassName('allow-vote')
    }.bind(this),
    onFailure : function (response) {
      var failureReason = response.responseText;
      if (!response.responseText || response.responseText == '' ) {
        failureReason = response.statusText;
      }
      if (response.statusText == '' /* No response */ || response.status == 12031 /* In IE */) {
        failureReason = 'Server not responding';
      }
      topicLikeBlock._x_notification.replace(new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('conversation.like.failed'))" + failureReason, 'error'));
    }.bind(this),
    on0 : function (response) {
      response.request.options.onFailure(response);
    },
    onComplete : function (response) {
      topicLikeBlock.votingInProgress = false;
    }.bind(this)
  });
}

function init() {
  $$('.answer').each(function(conv) {
    new XWiki.viewers.Comments(conv);
  });

  $$('.AddComment').each(function(el) {
    // el.hide();
  });

  // add vote handler for topics in forum
  $$('.topic-vote.allow-vote').each(function(topicDiv) {
    // add vote click handler for each topic
    console.log('Adding vote click handler to div ' + topicDiv);
    // if we have an active like button, add a listener to it
    topicDiv.observe('click', function(event) {
      conversationLikeHandler(event);
    }.bindAsEventListener(this));
  });

  // add permalink for topic
  $$('.topic-description a.permalink').each(function(item) {
    if (item) {
      item.observe('click', function(event) {
        item.blur();
        event.stop();
        showPermalinkBox(item);
      });
    }
  });
  // also make the conversation add activator to show the add form when clicked
  $$('.addconversation-activator').each(function(item) {
    item.observe('click', function(event) {
      // get the button that was clicked
      var activator = event.findElement();
      // get its form, which is the sibling form .addconversation
      var form = activator.up('div.addconversation-container').down('form.addconversation');
      // if we have a form, do all sorts of stuff, otherwise just let the link go
      if (form) {
        event.stop();
        // On form submission, the CKEditor is demanding to save the changes before leaving the page so we need to trigger the save action event.
        var submitButton = form.select('[type=submit]')[0];
        submitButton.observe('click', function() {
          this.fire('xwiki:actions:save');
        });

        form.removeClassName('hidden');
        activator.addClassName('hidden');

        // find the cancel button of this form and make it display the button back and hide the form
        var cancelButton = form.down('a.cancel');
        cancelButton.observe('click', function(event){
          event.stop();
          activator.removeClassName('hidden');
          form.addClassName('hidden');
        });
      }
    });
    // add delete for topic
    $$(".topic-moderation a.delete").each(function(topicDeletelink) {
      if (topicDeletelink) {
        topicDeletelink.observe('click', function(event) {
          event.stop();
          var commentsCount = $$(viewers.xcommentSelector).size();
          new XWiki.widgets.ConfirmationBox({
            onYes : function() {
              location.href=topicDeletelink.href;
            }
          },
          {
            confirmationText : commentsCount &gt; 0 ? "$escapetool.javascript($services.localization.render('conversations.topic.delete.confirm.withReplies', ['__number__']))".replace('__number__', commentsCount) : "$escapetool.javascript($services.localization.render('conversation.delete.confirm'))"
          });
        }.bindAsEventListener(this));
      }
    });
  });
}

function showPermalinkBox(item) {
  var permalinkBox = new XWiki.widgets.ConfirmationBox({
    onYes : function () {
      window.location = item.href;
    }
  },
  /* Interaction parameters */
  {
    confirmationText: "$services.localization.render('core.viewers.comments.permalink'): &lt;input type='text' class='full' value='" + item.href + "'/&gt;",
    yesButtonText: "$services.localization.render('core.viewers.comments.permalink.goto')",
    noButtonText : "$services.localization.render('core.viewers.comments.permalink.hide')"
  });
  permalinkBox.dialog.addClassName('permalinkBox')
  permalinkBox.dialog.down("input[type='text']").select();
}

// When the document is loaded, trigger the Comments form enhancements.
// Modification to work with curriki. This means js needs to be loaded non defered
document.observe('dom:loaded', init);

// End XWiki augmentation.
return XWiki;
}(XWiki || {}));
</code>
    </property>
    <property>
      <name>Forum</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
